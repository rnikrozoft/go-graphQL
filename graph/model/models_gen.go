// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Item struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Monster struct {
	ID    string        `json:"id"`
	Name  string        `json:"name"`
	Level int           `json:"level"`
	Class *MonsterClass `json:"class,omitempty"`
	Items []*Item       `json:"items"`
}

type Mutation struct {
}

type NewPlayer struct {
	Name  string       `json:"name"`
	Class *PlayerClass `json:"class,omitempty"`
}

type Player struct {
	ID    string       `json:"id"`
	Name  string       `json:"name"`
	Level int          `json:"level"`
	Class *PlayerClass `json:"class,omitempty"`
	Items []*Item      `json:"items"`
}

type Query struct {
}

type MonsterClass string

const (
	MonsterClassWarrior  MonsterClass = "WARRIOR"
	MonsterClassMage     MonsterClass = "MAGE"
	MonsterClassAssassin MonsterClass = "ASSASSIN"
)

var AllMonsterClass = []MonsterClass{
	MonsterClassWarrior,
	MonsterClassMage,
	MonsterClassAssassin,
}

func (e MonsterClass) IsValid() bool {
	switch e {
	case MonsterClassWarrior, MonsterClassMage, MonsterClassAssassin:
		return true
	}
	return false
}

func (e MonsterClass) String() string {
	return string(e)
}

func (e *MonsterClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MonsterClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MonsterClass", str)
	}
	return nil
}

func (e MonsterClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlayerClass string

const (
	PlayerClassWarrior  PlayerClass = "WARRIOR"
	PlayerClassMage     PlayerClass = "MAGE"
	PlayerClassAssassin PlayerClass = "ASSASSIN"
)

var AllPlayerClass = []PlayerClass{
	PlayerClassWarrior,
	PlayerClassMage,
	PlayerClassAssassin,
}

func (e PlayerClass) IsValid() bool {
	switch e {
	case PlayerClassWarrior, PlayerClassMage, PlayerClassAssassin:
		return true
	}
	return false
}

func (e PlayerClass) String() string {
	return string(e)
}

func (e *PlayerClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlayerClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlayerClass", str)
	}
	return nil
}

func (e PlayerClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
